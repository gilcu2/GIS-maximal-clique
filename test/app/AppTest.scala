package app

import org.scalatest.FlatSpec
import org.scalatest.matchers.Matchers
import app.App.DimacsGraph
import graphs.Edge
import graphs.Graph._

/**
 * @author Marek Lewandowski <marek.m.lewandowski@gmail.com>
 * @since 12/23/13
 */
class AppTest extends FlatSpec with Matchers {
  "App" should "read data in dimacs format" in {
    val formatExcerpt: String = """
                                  |c FILE:  C250.9.clq
                                  |c
                                  |c SOURCE: Generated by Michael Trick using
                                  |c         ggen, a program by Craig Morgenstern
                                  |c
                                  |c DESCRIPTION: Cx.y is a random graph on x vertices
                                  |c              with edge probability .y
                                  |c
                                  |c
                                  |c G(n,p) graph
                                  |c graph gen seed     : 438282
                                  |c number of vertices : 250
                                  |c max number of edges: 50000
                                  |c edge probability   : 0.900000
                                  |c data structure     : dense
                                  |c
                                  |c           Graph Stats
                                  |c number of vertices  : 250
                                  |c nonisolated vertices: 250
                                  |c number of edges     : 27984
                                  |c edge density        : 0.899084
                                  |c max degree          : 236
                                  |c avg degree          : 223.87
                                  |c min degree          : 203
                                  |p col 250 27984
                                  |e 2 1
                                  |e 3 2
                                  |e 4 2
                                  |e 4 3
                                  |e 100 199
                                """.stripMargin
    val dimacsGraph: DimacsGraph = App.readDimacsFormat(formatExcerpt.lines)

    assert(dimacsGraph.name === "C250.9.clq")
    assert(dimacsGraph.nodes === 250)
    assert(dimacsGraph.totalEdges === 27984)
    assert(dimacsGraph.edges === Set[Edge]((2, 1), (3, 2), (4, 2), (4, 3), (100, 199)))
  }

  it should "read also different lines with file name" in {
    val s ="""c File  p_hat700-1.clq
      |c
      |c Source: P. Soriano and M. Gendreau at  patrick@crt.umontreal.ca
      |c
      |c Reference: p-hat graphs are generated with the p-hat generator
      |c 	      which is a generalization of the classical uniform
      |c""".stripMargin

    assert(App.readDimacsFormat(s.lines).name === "p_hat700-1.clq")
  }

  it should "file name with blank space after" in {
    val s = "c File  p_hat700-1.clq                "
    assert(App.readDimacsFormat(s.lines).name === "p_hat700-1.clq")
  }
}
